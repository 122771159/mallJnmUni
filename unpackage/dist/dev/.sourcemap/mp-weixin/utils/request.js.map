{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["// utils/request.js\n\nimport { useUserStore } from \"@/stores\"; // 引入你的 pinia store\n\n// 后端接口基础路径\nconst BASE_URL = import.meta.env.VITE_APP_BASE_API;\n\n// 封装的请求函数\nconst request = (options) => {\n  return new Promise((resolve, reject) => {\n    // --- 请求拦截器逻辑 ---\n    const header = {\n      \"Content-Type\": \"application/json;charset=utf-8\",\n      ...options.header, // 允许覆盖默认header\n    };\n\n    // // 获取并设置token\n    // const token = uni.getStorageSync(\"token\");\n    // if (token) {\n    //   header[\"Authorization\"] = token;\n    // }\n\n    uni.request({\n      url: BASE_URL + options.url,\n      method: options.method || \"GET\",\n      data: options.data || {},\n      header: header,\n      timeout: options.timeout || 50000, // 默认50秒超时\n\n      // --- 响应成功拦截器逻辑 ---\n      success: (res) => {\n        const { data, header: responseHeaders } = res;\n\n        // // 响应头中如果存在新的token，则更新\n        // const new_token =\n        //   responseHeaders.Authorization || responseHeaders.authorization;\n        // if (new_token) {\n        //   // 更新 pinia store 和本地存储\n        //   useUserStore().setToken(new_token);\n        // }\n\n        // 登录失效处理 (code: 104)\n        // if (data.code === 104) {\n        //   uni.showModal({\n        //     title: \"提示\",\n        //     content: \"您的登录已失效，请重新登录\",\n        //     confirmText: \"再次登录\",\n        //     showCancel: false, // 一般不给用户取消的机会\n        //     success: (modalRes) => {\n        //       if (modalRes.confirm) {\n        //         // 清除本地token和store\n        //         useUserStore().clearToken();\n        //         // 跳转到登录页\n        //         uni.navigateTo({\n        //           url: \"/pages/login/login\",\n        //         });\n        //       }\n        //     },\n        //   });\n        //   // 中断promise链\n        //   return reject(new Error(\"登录失效\"));\n        // }\n\n        // // 业务逻辑错误处理 (success: false)\n        // if (data.success !== undefined && !data.success) {\n        //   uni.showToast({\n        //     title: data.msg || \"操作失败\",\n        //     icon: \"none\",\n        //     duration: 3000,\n        //   });\n        //   // 中断promise链\n        //   return reject(new Error(data.msg || \"操作失败\"));\n        // }\n\n        // 成功，返回核心数据\n        resolve(data);\n      },\n\n      // --- 响应失败拦截器逻辑 (网络错误等) ---\n      fail: (error) => {\n        // uni.showToast({\n        //   title: `请求失败: ${error.errMsg || \"网络错误\"}`,\n        //   icon: \"none\",\n        //   duration: 3000,\n        // });\n        reject(error);\n      },\n    });\n  });\n};\n\n// 导出封装好的方法\nconst http = {\n  get(url, params = {}, header = {}) {\n    return request({\n      url,\n      method: \"GET\",\n      data: params,\n      header,\n    });\n  },\n  post(url, data = {}, header = {}) {\n    return request({\n      url,\n      method: \"POST\",\n      data,\n      header,\n    });\n  },\n  put(url, data = {}, header = {}) {\n    return request({\n      url,\n      method: \"PUT\",\n      data,\n      header,\n    });\n  },\n  delete(url, data = {}, header = {}) {\n    return request({\n      url,\n      method: \"DELETE\",\n      data,\n      header,\n    });\n  },\n  getFile(url, header = {}) {\n    // const token = uni.getStorageSync(\"token\");\n    return new Promise((resolve, reject) => {\n      uni.downloadFile({\n        url: BASE_URL + url,\n        header: {\n          // Authorization: token,\n          ...header,\n        },\n        success: (res) => {\n          resolve(res);\n        },\n        fail: (err) => {\n          reject(err);\n        },\n      });\n    });\n  },\n  // 你可以继续封装 upload 等方法\n};\n\nexport default http;\n"],"names":["uni"],"mappings":";;;AAKA,MAAM,WAAW;AAGjB,MAAM,UAAU,CAAC,YAAY;AAC3B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,UAAM,SAAS;AAAA,MACb,gBAAgB;AAAA,MAChB,GAAG,QAAQ;AAAA;AAAA,IAAA;AASbA,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK,WAAW,QAAQ;AAAA,MACxB,QAAQ,QAAQ,UAAU;AAAA,MAC1B,MAAM,QAAQ,QAAQ,CAAC;AAAA,MACvB;AAAA,MACA,SAAS,QAAQ,WAAW;AAAA;AAAA;AAAA,MAG5B,SAAS,CAAC,QAAQ;AAChB,cAAM,EAAE,MAAM,QAAQ,gBAAA,IAAoB;AA4C1C,gBAAQ,IAAI;AAAA,MACd;AAAA;AAAA,MAGA,MAAM,CAAC,UAAU;AAMf,eAAO,KAAK;AAAA,MACd;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;AAGA,MAAM,OAAO;AAAA,EACX,IAAI,KAAK,SAAS,CAAA,GAAI,SAAS,CAAA,GAAI;AACjC,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR,MAAM;AAAA,MACN;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EACA,KAAK,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAChC,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EACA,IAAI,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAC/B,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EACA,OAAO,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAClC,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAAA,EACA,QAAQ,KAAK,SAAS,IAAI;AAExB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,oBAAAA,MAAI,aAAa;AAAA,QACf,KAAK,WAAW;AAAA,QAChB,QAAQ;AAAA;AAAA,UAEN,GAAG;AAAA,QACL;AAAA,QACA,SAAS,CAAC,QAAQ;AAChB,kBAAQ,GAAG;AAAA,QACb;AAAA,QACA,MAAM,CAAC,QAAQ;AACb,iBAAO,GAAG;AAAA,QACZ;AAAA,MAAA,CACD;AAAA,IAAA,CACF;AAAA,EACH;AAAA;AAEF;;"}