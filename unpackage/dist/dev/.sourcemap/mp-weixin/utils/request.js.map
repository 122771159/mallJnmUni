{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["// utils/request.js\n\nimport { useAdminStore } from '@/stores'; // 引入你的 pinia store\n\n// 后端接口基础路径\nconst BASE_URL = import.meta.env.VITE_APP_BASE_API;\n\n// 封装的请求函数\nconst request = (options) => {\n  return new Promise((resolve, reject) => {\n    // --- 请求拦截器逻辑 ---\n    const header = {\n      'Content-Type': 'application/json;charset=utf-8',\n      ...options.header, // 允许覆盖默认header\n    };\n\n    // 获取并设置token\n    const token = uni.getStorageSync('token');\n    if (token) {\n      header['Authorization'] = token;\n    }\n\n    uni.request({\n      url: BASE_URL + options.url,\n      method: options.method || 'GET',\n      data: options.data || {},\n      header: header,\n      timeout: options.timeout || 50000, // 默认50秒超时\n      \n      // --- 响应成功拦截器逻辑 ---\n      success: (res) => {\n        const { data, header: responseHeaders } = res;\n\n        // 响应头中如果存在新的token，则更新\n        const new_token = responseHeaders.Authorization || responseHeaders.authorization;\n        if (new_token) {\n          // 更新 pinia store 和本地存储\n          useAdminStore().setToken(new_token);\n        }\n\n        // 登录失效处理 (code: 104)\n        if (data.code === 104) {\n          uni.showModal({\n            title: '提示',\n            content: '您的登录已失效，请重新登录',\n            confirmText: '再次登录',\n            showCancel: false, // 一般不给用户取消的机会\n            success: (modalRes) => {\n              if (modalRes.confirm) {\n                // 清除本地token和store\n                useAdminStore().clearToken(); \n                // 跳转到登录页\n                uni.reLaunch({\n                  url: '/pages/login/login' // 请替换为你的登录页面路径\n                });\n              }\n            }\n          });\n          // 中断promise链\n          return reject(new Error('登录失效'));\n        }\n\n        // 业务逻辑错误处理 (success: false)\n        if (data.success !== undefined && !data.success) {\n          uni.showToast({\n            title: data.msg || '操作失败',\n            icon: 'none',\n            duration: 3000\n          });\n          // 中断promise链\n          return reject(new Error(data.msg || '操作失败'));\n        }\n        \n        // 成功，返回核心数据\n        resolve(data);\n      },\n      \n      // --- 响应失败拦截器逻辑 (网络错误等) ---\n      fail: (error) => {\n        uni.showToast({\n          title: `请求失败: ${error.errMsg || '网络错误'}`,\n          icon: 'none',\n          duration: 3000\n        });\n        reject(error);\n      }\n    });\n  });\n};\n\n// 导出封装好的方法\nconst http = {\n  get(url, params = {}, header = {}) {\n    return request({\n      url,\n      method: 'GET',\n      data: params,\n\t  header\n    });\n  },\n  post(url, data = {}, header = {}) {\n    return request({\n      url,\n      method: 'POST',\n      data,\n\t  header\n    });\n  },\n  put(url, data = {}, header = {}) {\n    return request({\n      url,\n      method: 'PUT',\n      data,\n\t  header\n    });\n  },\n  delete(url, data = {}, header = {}) {\n    return request({\n      url,\n      method: 'DELETE',\n      data,\n\t  header\n    });\n  }\n  // 你可以继续封装 upload 等方法\n};\n\nexport default http;"],"names":["uni","useAdminStore"],"mappings":";;;AAKA,MAAM,WAAW;AAGjB,MAAM,UAAU,CAAC,YAAY;AAC3B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,UAAM,SAAS;AAAA,MACb,gBAAgB;AAAA,MAChB,GAAG,QAAQ;AAAA;AAAA,IAAA;AAIP,UAAA,QAAQA,cAAAA,MAAI,eAAe,OAAO;AACxC,QAAI,OAAO;AACT,aAAO,eAAe,IAAI;AAAA,IAC5B;AAEAA,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK,WAAW,QAAQ;AAAA,MACxB,QAAQ,QAAQ,UAAU;AAAA,MAC1B,MAAM,QAAQ,QAAQ,CAAC;AAAA,MACvB;AAAA,MACA,SAAS,QAAQ,WAAW;AAAA;AAAA;AAAA,MAG5B,SAAS,CAAC,QAAQ;AAChB,cAAM,EAAE,MAAM,QAAQ,gBAAA,IAAoB;AAGpC,cAAA,YAAY,gBAAgB,iBAAiB,gBAAgB;AACnE,YAAI,WAAW;AAECC,qCAAA,EAAE,SAAS,SAAS;AAAA,QACpC;AAGI,YAAA,KAAK,SAAS,KAAK;AACrBD,wBAAAA,MAAI,UAAU;AAAA,YACZ,OAAO;AAAA,YACP,SAAS;AAAA,YACT,aAAa;AAAA,YACb,YAAY;AAAA;AAAA,YACZ,SAAS,CAAC,aAAa;AACrB,kBAAI,SAAS,SAAS;AAEpBC,6BAAA,cAAA,EAAgB;AAEhBD,8BAAAA,MAAI,SAAS;AAAA,kBACX,KAAK;AAAA;AAAA,gBAAA,CACN;AAAA,cACH;AAAA,YACF;AAAA,UAAA,CACD;AAED,iBAAO,OAAO,IAAI,MAAM,MAAM,CAAC;AAAA,QACjC;AAGA,YAAI,KAAK,YAAY,UAAa,CAAC,KAAK,SAAS;AAC/CA,wBAAAA,MAAI,UAAU;AAAA,YACZ,OAAO,KAAK,OAAO;AAAA,YACnB,MAAM;AAAA,YACN,UAAU;AAAA,UAAA,CACX;AAED,iBAAO,OAAO,IAAI,MAAM,KAAK,OAAO,MAAM,CAAC;AAAA,QAC7C;AAGA,gBAAQ,IAAI;AAAA,MACd;AAAA;AAAA,MAGA,MAAM,CAAC,UAAU;AACfA,sBAAAA,MAAI,UAAU;AAAA,UACZ,OAAO,SAAS,MAAM,UAAU,MAAM;AAAA,UACtC,MAAM;AAAA,UACN,UAAU;AAAA,QAAA,CACX;AACD,eAAO,KAAK;AAAA,MACd;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;AAGA,MAAM,OAAO;AAAA,EACX,IAAI,KAAK,SAAS,CAAA,GAAI,SAAS,CAAA,GAAI;AACjC,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR,MAAM;AAAA,MACT;AAAA,IAAA,CACE;AAAA,EACH;AAAA,EACA,KAAK,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAChC,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACH;AAAA,IAAA,CACE;AAAA,EACH;AAAA,EACA,IAAI,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAC/B,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACH;AAAA,IAAA,CACE;AAAA,EACH;AAAA,EACA,OAAO,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAClC,WAAO,QAAQ;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACH;AAAA,IAAA,CACE;AAAA,EACH;AAAA;AAEF;;"}